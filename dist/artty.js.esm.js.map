{"version":3,"file":"artty.js.esm.js","sources":["../src/h.js","../src/generator.js","../src/diff.js","../src/parser.js","../src/artty.js"],"sourcesContent":["const h = (tag, opts = { attrs: {}, on: {} }, children) => {\r\n    if('undefined' === typeof tag) return null;\r\n    return Array.isArray(opts) ? \r\n    {tag, opts: { attrs: {}, on: {} }, children: opts.flat()} :\r\n    {tag, opts, children: children.flat()};\r\n};\r\n\r\nexport default h;","export const generate = (vNode) => {\r\n    if(typeof vNode === 'string') return document.createTextNode(vNode);\r\n    return generateElement(vNode);\r\n};\r\n\r\nexport const generateElement = (vNode) => {\r\n    const $el = document.createElement(vNode.tag);\r\n    for(var [k,v] of Object.entries(vNode?.opts?.attrs)) $el.setAttribute(k,v);\r\n    for(var vChild of vNode.children){\r\n        if(vChild !== null){\r\n            const $child = generate(vChild);\r\n            $el.appendChild($child);\r\n        }\r\n    }\r\n    return $el;\r\n}","import { generate } from \"./generator\";\r\nexport const zip = (xs, ys) => {\r\n    const zipped = [];\r\n    for (var i = 0; i < Math.min(xs.length, ys.length); i++) {\r\n        zipped.push([xs[i], ys[i]]);\r\n    }\r\n    return zipped;\r\n};\r\n\r\nexport const diffAttribute = (vNewNode,vOldAttr, vNewAttr) => {\r\n    const patches = [];\r\n    for (const [k, v] of Object.entries(vNewAttr)) {\r\n       patches.push($node => {\r\n            try{\r\n                    $node.setAttribute(k, v);\r\n            }catch(e){ \r\n                // console.error(`invalid directive name ${k}`, e.message);\r\n            }\r\n           return $node;\r\n       });\r\n    }\r\n\r\n    for (const k in vOldAttr) {\r\n        if(!(k in vOldAttr)) {\r\n            patches.push($node => {\r\n                $node.removeAttribute(k);\r\n                return $node;\r\n            });\r\n        }\r\n    }\r\n\r\n    return $node => {\r\n        for(var patch of patches) {\r\n            patch($node);\r\n        }\r\n    };\r\n};\r\n\r\nexport const diffChildren = (vOldChildren, vNewChildren) => {\r\n\r\n    const patches = [];\r\n    const additionalPatches = [];\r\n    const removalPatches = [];\r\n\r\n    for(var [oldVChild, newVChild] of zip(vOldChildren, vNewChildren)) {\r\n        patches.push(diff(oldVChild, newVChild));\r\n    }\r\n\r\n    if(vOldChildren.length < vNewChildren.length){\r\n        for (const additionalChild of vNewChildren.slice(vOldChildren.length)) {\r\n            additionalPatches.push($node => {\r\n                const $newChild = generate(additionalChild);\r\n                $node.appendChild($newChild);\r\n                return $node;\r\n            });\r\n        }\r\n    }else{\r\n        for (var i = 0; i < Math.abs(vNewChildren.length - vOldChildren.length); i++) {\r\n            removalPatches.push($node => {\r\n                $node.removeChild($node.lastChild);\r\n                return $node;\r\n            });\r\n        }\r\n    }\r\n\r\n    return $parent => {\r\n\r\n\r\n        for(const [patch, child] of zip(patches, $parent.childNodes)) {\r\n            patch(child);\r\n        }\r\n\r\n        for(const patch of additionalPatches){\r\n            patch($parent);\r\n        }\r\n\r\n        for(const patch of removalPatches){\r\n            patch($parent);\r\n        }\r\n\r\n        return $parent;\r\n    };\r\n};\r\n\r\nexport const diff = (vOldNode, vNewNode) => {\r\n\r\n    if(vNewNode === undefined){\r\n        return $node => {\r\n            $node.remove();\r\n            return undefined;\r\n        };\r\n    }\r\n\r\n    if(typeof vOldNode === 'string' || typeof vNewNode === 'string'){\r\n        if(vOldNode !== vNewNode){\r\n            return $node => {\r\n                const $newNode = generate(vNewNode);\r\n                $node.replaceWith($newNode);\r\n                return $newNode;\r\n            };\r\n        }else{\r\n            return $node => undefined;\r\n        }\r\n    }\r\n\r\n    if(vOldNode.tagName !== vNewNode.tagName){\r\n        return $node => {\r\n            const $newNode = generate(vNewNode);\r\n            $node.replaceWith($newNode);\r\n            return $newNode;\r\n        };\r\n    }\r\n\r\n    const patchAttribute = diffAttribute(vNewNode,vOldNode.opts.attrs, vNewNode.opts.attrs);\r\n    const patchChildren = diffChildren(vOldNode.children, vNewNode.children);\r\n\r\n    return $node => {\r\n        patchAttribute($node);\r\n        patchChildren($node);\r\n        // patchKey($node);\r\n        return $node;\r\n    };\r\n}\r\n","export const parse = ($target, d = {}) => {\r\n    const ctx = { };\r\n    var vnode = [];\r\n    for(var $childNode of $target.childNodes){\r\n        if($childNode.nodeType === Node.TEXT_NODE) {\r\n            vnode.push(parseFromElement($childNode, ctx));\r\n            continue;\r\n        }\r\n        if(!$childNode.hasAttribute('(else)'))\r\n            vnode.push(parseFromElement($childNode, ctx));\r\n    }\r\n    return `[${vnode.join(',')}]`;\r\n}\r\n\r\nexport const h = ($node, ctx = {}) => {\r\n    // console.log('context', ctx);\r\n    if(typeof $node === \"undefined\" || typeof $node === 'null') return `h()`;\r\n    return `h('${$node.tagName}',${parseOptions($node,ctx)},${parse($node,ctx)})`\r\n};\r\n\r\nexport const parseDirective = ($node, ctx = {}) => {\r\n    if($node.hasAttribute('(for)')){\r\n        var $statement = $node.getAttribute('(for)');\r\n        $node.removeAttribute('(for)');\r\n        if(!$statement.includes(' in '))\r\n            return `__.l((${parseExpression($statement.trim(),ctx)}), () => ${parseFromElement($node,ctx)})`;\r\n        var [l,r] = $statement.split(' in ');\r\n        l = l.trim();\r\n        return `__.l((${parseExpression(r,ctx)}), (${l}) => ${parseFromElement($node,ctx)})`;\r\n    }\r\n\r\n    if($node.hasAttribute('(if)')){\r\n        var $statement = $node.getAttribute('(if)');\r\n        $node.removeAttribute('(if)')\r\n        var $elseNode = $node.nextElementSibling;\r\n        if($elseNode !== null && $elseNode.hasAttribute('(else)')){\r\n            $elseNode.setAttribute('data-elsed', true);\r\n            return `((${parseExpression($statement,ctx)}) ? ${parseFromElement($node,ctx)} : ${parseFromElement($elseNode,ctx)})`;\r\n        }\r\n        return `((${parseExpression($statement,ctx)}) ? ${parseFromElement($node,ctx)} : ${parseFromElement()})`;\r\n    }\r\n\r\n    return h($node, ctx);\r\n}\r\n\r\nexport const parseFromElement = ($node, ctx = {}) => {\r\n    if(typeof $node === 'undefined') return h();\r\n    if($node.nodeType === Node.TEXT_NODE){\r\n        return parseText($node.textContent,ctx);\r\n    }\r\n\r\n    return parseDirective($node,ctx);\r\n}\r\n\r\nexport const parseText = ($text, ctx = {}) => {\r\n    var text = $text.replaceAll(\"\\n\",\"\\\\n\");\r\n    var parts = [];\r\n    var t = \"\";\r\n    var p = [];\r\n    for(var c of text.split('')){\r\n        \r\n        if(c === '{'){\r\n            p.push('{');\r\n            if(p.length > 0){\r\n                parts.push(t);\r\n                t = \"{\";\r\n            }\r\n        }else if(c === '}'){\r\n            p.pop();\r\n            if(p.length <= 0){\r\n                parts.push(t + c);\r\n                t = \"\";\r\n            }\r\n        }else \r\n        t += c;\r\n    }\r\n    parts.push(t);\r\n    return parseReactive(parts.filter(e => e !== ''),ctx);\r\n}\r\n\r\nexport const parseExpression = (e, ctx = {}) => {\r\n    // console.log('exp ', ctx)\r\n    var exp = e || '';\r\n    var regex = /([a-zA-Z_$.][a-zA-Z_$0-9.]*)/igm;\r\n    var $$ = exp.matchAll(regex);\r\n    if($$ === null) return exp;\r\n    for (let $ of $$) {\r\n        var variable = $[0];\r\n        var pos = $.index;\r\n        if((typeof window[(variable.split('.')[0] || $)] === 'undefined')){\r\n            exp = exp.substring(0,pos) + exp.substring(pos).replace(variable.split('.')[0],`(_.${variable.split('.')[0]} || ${variable.split('.')[0]})`);\r\n        }\r\n    }\r\n    // for(var $ of $$){\r\n    //     if((typeof window[($.split('.')[0] || $)] === 'undefined')){\r\n    //         console.log($$)\r\n    //     }\r\n    // }\r\n    return exp;\r\n}\r\n\r\nexport const parseReactive = (parts, ctx = {}) => {\r\n    return parts.map(e => {\r\n        let exp = \"\";\r\n        if(e.startsWith('{') && e.endsWith('}')){\r\n            exp = e.slice(1,e.length-1).trim();\r\n        }else{\r\n            return `\"${e}\"`;\r\n        }\r\n        return `__.s(${parseExpression(exp,ctx)})`;\r\n    }).join(\",\");\r\n}\r\n\r\nexport const parseOptions = ($node, ctx = {}) => {\r\n    var attrs = [];\r\n    if($node.attributes.length > 0){\r\n        for(var {name,value} of $node.attributes){\r\n            if(name.includes(':'))\r\n                attrs.push(`'${name.slice(1)}': ${parseExpression(value,ctx)}`);\r\n            else\r\n                attrs.push(`'${name}': '${value}'`);\r\n        }\r\n    }\r\n    return `{ attrs: {${attrs.join(',')}}}`;\r\n}\r\n\r\n\r\nexport const parseDOM = ($html, ctx = {}) => {\r\n    try{\r\n        const data = new DOMParser().parseFromString($html,'text/html').body;\r\n        return data;\r\n    }catch(e){\r\n        throw new Error(\"Parsing DOM error!\");\r\n    }\r\n}","import h from './h';\r\nimport { diff } from './diff';\r\nimport { generate } from './generator';\r\nimport {reactive} from './reactive';\r\nimport hyperactiv from 'hyperactiv'\r\nimport { parse } from './parser';\r\nconst { observe, computed } = hyperactiv;\r\n\r\nexport const createApp = (state) => {\r\n    return ({\r\n        state: observe(state),\r\n        vnodes: [],\r\n        template: \"\",\r\n        $el: null,\r\n        updateList: [],\r\n        sync($s){\r\n            this.$el = document.querySelector($s);\r\n            this.template = `return h('div',${parse(this.$el)})`;\r\n            const [_,__] = [this.state,this.utils];\r\n            let vApp = new Function('h','_','__',this.template)(h,_,__);\r\n            let $app = generate(vApp);\r\n            let $rootEl = this.mount($app,this.$el);\r\n            this.state.__handler = (a,b,c,d) => {\r\n                const [_,__] = [this.state,this.utils];\r\n                let vNewApp = new Function('h','_','__',this.template)(h,_,__);\r\n                const patch = diff(vApp,vNewApp);\r\n                $rootEl = patch($rootEl);\r\n                vApp = vNewApp;\r\n                this.vnodes = vApp;\r\n            }\r\n            return this;\r\n        },\r\n        update(){\r\n            for(var v of this.updateList) v(this.state);\r\n            this.$el.removeAttribute('(cloak)');\r\n        },\r\n        render(cb){\r\n            // this.nextTick((state) => {\r\n                \r\n            // });\r\n            // return this;\r\n        },\r\n        nextTick(cb){\r\n            this.updateList.push(cb);\r\n        },\r\n        mount($node,$el){\r\n            $el.replaceWith($node);\r\n            return $node;\r\n        },\r\n        utils: {\r\n            l(time, cb){\r\n                var h = [];\r\n                if(typeof time === 'number'){\r\n                    Array.from(Array(time).keys()).forEach((a,i) => h.push(cb(i,i)));\r\n                }\r\n                if(Array.isArray(time)){\r\n                    time.forEach((a,i) => h.push(cb(a, i)));\r\n                }\r\n                return h;\r\n            },\r\n            s(t){\r\n                if(typeof t === 'undefined') return \"\";\r\n                if(typeof t === 'object') return JSON.stringify(t);\r\n                return String(t);\r\n            }\r\n        }\r\n    });\r\n};"],"names":["h","tag","opts","children","attrs","on","Array","isArray","flat","generate","vNode","document","createTextNode","generateElement","$el","createElement","Object","entries","_vNode$opts","setAttribute","vChild","$child","appendChild","zip","xs","ys","zipped","i","Math","min","length","push","diff","vOldNode","vNewNode","undefined","$node","remove","$newNode","replaceWith","tagName","patchAttribute","vOldAttr","vNewAttr","patches","k","v","e","removeAttribute","patch","diffAttribute","patchChildren","vOldChildren","vNewChildren","additionalPatches","removalPatches","additionalChild","$newChild","slice","abs","removeChild","lastChild","$parent","childNodes","diffChildren","parse","$target","d","vnode","$childNode","nodeType","Node","TEXT_NODE","hasAttribute","parseFromElement","join","ctx","parseOptions","parseText","textContent","$statement","getAttribute","includes","parseExpression","trim","split","l","r","$elseNode","nextElementSibling","parseDirective","$text","parts","t","p","replaceAll","c","pop","parseReactive","filter","exp","$$","matchAll","$","variable","pos","index","window","substring","replace","map","startsWith","endsWith","attributes","name","value","observe","hyperactiv","createApp","state","vnodes","template","updateList","sync","$s","this","querySelector","utils","_","__","vApp","Function","$app","$rootEl","mount","__handler","a","b","_this","vNewApp","update","render","cb","nextTick","time","from","keys","forEach","s","JSON","stringify","String"],"mappings":"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"}