{"version":3,"file":"parser.umd.js","sources":["../src/parser.js"],"sourcesContent":["export const parse = ($target, d = {}) => {\r\n    const ctx = { };\r\n    var vnode = [];\r\n    for(var $childNode of $target.childNodes){\r\n        if($childNode.nodeType === Node.TEXT_NODE) {\r\n            vnode.push(parseFromElement($childNode, ctx));\r\n            continue;\r\n        }\r\n        if(!$childNode.hasAttribute('(else)'))\r\n            vnode.push(parseFromElement($childNode, ctx));\r\n    }\r\n    return `[${vnode.join(',')}]`;\r\n}\r\n\r\nexport const h = ($node, ctx = {}) => {\r\n    // console.log('context', ctx);\r\n    if(typeof $node === \"undefined\" || typeof $node === 'null') return `h()`;\r\n    return `h('${$node.tagName}',${parseOptions($node,ctx)},${parse($node,ctx)})`\r\n};\r\n\r\nexport const parseDirective = ($node, ctx = {}) => {\r\n    if($node.hasAttribute('(for)')){\r\n        var $statement = $node.getAttribute('(for)');\r\n        $node.removeAttribute('(for)');\r\n        if(!$statement.includes(' in '))\r\n            return `__.l((${parseExpression($statement.trim(),ctx)}), () => ${parseFromElement($node,ctx)})`;\r\n        var [l,r] = $statement.split(' in ');\r\n        l = l.trim();\r\n        return `__.l((${parseExpression(r,ctx)}), (${l}) => ${parseFromElement($node,ctx)})`;\r\n    }\r\n\r\n    if($node.hasAttribute('(if)')){\r\n        var $statement = $node.getAttribute('(if)');\r\n        $node.removeAttribute('(if)')\r\n        var $elseNode = $node.nextElementSibling;\r\n        if($elseNode !== null && $elseNode.hasAttribute('(else)')){\r\n            $elseNode.setAttribute('data-elsed', true);\r\n            return `((${parseExpression($statement,ctx)}) ? ${parseFromElement($node,ctx)} : ${parseFromElement($elseNode,ctx)})`;\r\n        }\r\n        return `((${parseExpression($statement,ctx)}) ? ${parseFromElement($node,ctx)} : ${parseFromElement()})`;\r\n    }\r\n\r\n    return h($node, ctx);\r\n}\r\n\r\nexport const parseFromElement = ($node, ctx = {}) => {\r\n    if(typeof $node === 'undefined') return h();\r\n    if($node.nodeType === Node.TEXT_NODE){\r\n        return parseText($node.textContent,ctx);\r\n    }\r\n\r\n    return parseDirective($node,ctx);\r\n}\r\n\r\nexport const parseText = ($text, ctx = {}) => {\r\n    var text = $text.replaceAll(\"\\n\",\"\\\\n\");\r\n    var parts = [];\r\n    var t = \"\";\r\n    var p = [];\r\n    for(var c of text.split('')){\r\n        \r\n        if(c === '{'){\r\n            p.push('{');\r\n            if(p.length > 0){\r\n                parts.push(t);\r\n                t = \"{\";\r\n            }\r\n        }else if(c === '}'){\r\n            p.pop();\r\n            if(p.length <= 0){\r\n                parts.push(t + c);\r\n                t = \"\";\r\n            }\r\n        }else \r\n        t += c;\r\n    }\r\n    parts.push(t);\r\n    return parseReactive(parts.filter(e => e !== ''),ctx);\r\n}\r\n\r\nexport const parseExpression = (e, ctx = {}) => {\r\n    // console.log('exp ', ctx)\r\n    var exp = e || '';\r\n    var regex = /([a-zA-Z_$.][a-zA-Z_$0-9.]*)/igm;\r\n    var $$ = exp.matchAll(regex);\r\n    if($$ === null) return exp;\r\n    for (let $ of $$) {\r\n        var variable = $[0];\r\n        var pos = $.index;\r\n        if((typeof window[(variable.split('.')[0] || $)] === 'undefined')){\r\n            exp = exp.substring(0,pos) + exp.substring(pos).replace(variable.split('.')[0],`(_.${variable.split('.')[0]} || ${variable.split('.')[0]})`);\r\n        }\r\n    }\r\n    // for(var $ of $$){\r\n    //     if((typeof window[($.split('.')[0] || $)] === 'undefined')){\r\n    //         console.log($$)\r\n    //     }\r\n    // }\r\n    return exp;\r\n}\r\n\r\nexport const parseReactive = (parts, ctx = {}) => {\r\n    return parts.map(e => {\r\n        let exp = \"\";\r\n        if(e.startsWith('{') && e.endsWith('}')){\r\n            exp = e.slice(1,e.length-1).trim();\r\n        }else{\r\n            return `\"${e}\"`;\r\n        }\r\n        return `__.s(${parseExpression(exp,ctx)})`;\r\n    }).join(\",\");\r\n}\r\n\r\nexport const parseOptions = ($node, ctx = {}) => {\r\n    var attrs = [];\r\n    if($node.attributes.length > 0){\r\n        for(var {name,value} of $node.attributes){\r\n            if(name.includes(':'))\r\n                attrs.push(`'${name.slice(1)}': ${parseExpression(value,ctx)}`);\r\n            else\r\n                attrs.push(`'${name}': '${value}'`);\r\n        }\r\n    }\r\n    return `{ attrs: {${attrs.join(',')}}}`;\r\n}\r\n\r\n\r\nexport const parseDOM = ($html, ctx = {}) => {\r\n    try{\r\n        const data = new DOMParser().parseFromString($html,'text/html').body;\r\n        return data;\r\n    }catch(e){\r\n        throw new Error(\"Parsing DOM error!\");\r\n    }\r\n}"],"names":["parse","$target","d","vnode","childNodes","$childNode","nodeType","Node","TEXT_NODE","hasAttribute","push","parseFromElement","join","h","$node","ctx","tagName","parseOptions","parseDirective","$statement","getAttribute","removeAttribute","includes","parseExpression","trim","split","l","r","$elseNode","nextElementSibling","setAttribute","parseText","textContent","$text","parts","t","p","replaceAll","c","length","pop","parseReactive","filter","e","exp","$$","matchAll","$","variable","pos","index","window","substring","replace","map","startsWith","endsWith","slice","attrs","attributes","name","value","$html","DOMParser","parseFromString","body","Error"],"mappings":"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"}