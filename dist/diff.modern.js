const t=t=>"string"==typeof t?document.createTextNode(t):r(t),r=r=>{const e=document.createElement(r.tag);for(var[n,o]of Object.entries(null==r||null==(s=r.opts)?void 0:s.attrs)){var s;e.setAttribute(n,o)}for(var c of r.children)if(null!==c){const r=t(c);e.appendChild(r)}return e},e=(t,r)=>{const e=[];for(var n=0;n<Math.min(t.length,r.length);n++)e.push([t[n],r[n]]);return e},n=(t,r,e)=>{const n=[];for(const[t,r]of Object.entries(e))n.push(e=>{try{e.setAttribute(t,r)}catch(t){}return e});for(const t in r)t in r||n.push(r=>(r.removeAttribute(t),r));return t=>{for(var r of n)r(t)}},o=(r,n)=>{const o=[],c=[],f=[];for(var[i,l]of e(r,n))o.push(s(i,l));if(r.length<n.length)for(const e of n.slice(r.length))c.push(r=>{const n=t(e);return r.appendChild(n),r});else for(var u=0;u<Math.abs(n.length-r.length);u++)f.push(t=>(t.removeChild(t.lastChild),t));return t=>{for(const[r,n]of e(o,t.childNodes))r(n);for(const r of c)r(t);for(const r of f)r(t);return t}},s=(r,e)=>{if(void 0===e)return t=>{t.remove()};if("string"==typeof r||"string"==typeof e)return r!==e?r=>{const n=t(e);return r.replaceWith(n),n}:t=>{};if(r.tagName!==e.tagName)return r=>{const n=t(e);return r.replaceWith(n),n};const s=n(0,r.opts.attrs,e.opts.attrs),c=o(r.children,e.children);return t=>(s(t),c(t),t)};export{s as diff,n as diffAttribute,o as diffChildren,e as zip};
//# sourceMappingURL=diff.modern.js.map
