{"version":3,"file":"parser.modern.js","sources":["../src/parser.js"],"sourcesContent":["export const parse = ($target, d = {}) => {\r\n    const ctx = { };\r\n    var vnode = [];\r\n    for(var $childNode of $target.childNodes){\r\n        if($childNode.nodeType === Node.TEXT_NODE) {\r\n            vnode.push(parseFromElement($childNode, ctx));\r\n            continue;\r\n        }\r\n        if(!$childNode.hasAttribute('(else)'))\r\n            vnode.push(parseFromElement($childNode, ctx));\r\n    }\r\n    return `[${vnode.join(',')}]`;\r\n}\r\n\r\nexport const h = ($node, ctx = {}) => {\r\n    // console.log('context', ctx);\r\n    if(typeof $node === \"undefined\" || typeof $node === 'null') return `h()`;\r\n    return `h('${$node.tagName}',${parseOptions($node,ctx)},${parse($node,ctx)})`\r\n};\r\n\r\nexport const parseDirective = ($node, ctx = {}) => {\r\n    if($node.hasAttribute('(for)')){\r\n        var $statement = $node.getAttribute('(for)');\r\n        $node.removeAttribute('(for)');\r\n        if(!$statement.includes(' in '))\r\n            return `__.l((${parseExpression($statement.trim(),ctx)}), () => ${parseFromElement($node,ctx)})`;\r\n        var [l,r] = $statement.split(' in ');\r\n        l = l.trim();\r\n        return `__.l((${parseExpression(r,ctx)}), (${l}) => ${parseFromElement($node,ctx)})`;\r\n    }\r\n\r\n    if($node.hasAttribute('(if)')){\r\n        var $statement = $node.getAttribute('(if)');\r\n        $node.removeAttribute('(if)')\r\n        var $elseNode = $node.nextElementSibling;\r\n        if($elseNode !== null && $elseNode.hasAttribute('(else)')){\r\n            $elseNode.setAttribute('data-elsed', true);\r\n            return `((${parseExpression($statement,ctx)}) ? ${parseFromElement($node,ctx)} : ${parseFromElement($elseNode,ctx)})`;\r\n        }\r\n        return `((${parseExpression($statement,ctx)}) ? ${parseFromElement($node,ctx)} : ${parseFromElement()})`;\r\n    }\r\n\r\n    return h($node, ctx);\r\n}\r\n\r\nexport const parseFromElement = ($node, ctx = {}) => {\r\n    if(typeof $node === 'undefined') return h();\r\n    if($node.nodeType === Node.TEXT_NODE){\r\n        return parseText($node.textContent,ctx);\r\n    }\r\n\r\n    return parseDirective($node,ctx);\r\n}\r\n\r\nexport const parseText = ($text, ctx = {}) => {\r\n    var text = $text.replaceAll(\"\\n\",\"\\\\n\");\r\n    var parts = [];\r\n    var t = \"\";\r\n    var p = [];\r\n    for(var c of text.split('')){\r\n        \r\n        if(c === '{'){\r\n            p.push('{');\r\n            if(p.length > 0){\r\n                parts.push(t);\r\n                t = \"{\";\r\n            }\r\n        }else if(c === '}'){\r\n            p.pop();\r\n            if(p.length <= 0){\r\n                parts.push(t + c);\r\n                t = \"\";\r\n            }\r\n        }else \r\n        t += c;\r\n    }\r\n    parts.push(t);\r\n    return parseReactive(parts.filter(e => e !== ''),ctx);\r\n}\r\n\r\nexport const parseExpression = (e, ctx = {}) => {\r\n    // console.log('exp ', ctx)\r\n    var exp = e || '';\r\n    var regex = /([a-zA-Z_$.][a-zA-Z_$0-9.]*)/igm;\r\n    var $$ = exp.matchAll(regex);\r\n    if($$ === null) return exp;\r\n    for (let $ of $$) {\r\n        var variable = $[0];\r\n        var pos = $.index;\r\n        if((typeof window[(variable.split('.')[0] || $)] === 'undefined')){\r\n            exp = exp.substring(0,pos) + exp.substring(pos).replace(variable.split('.')[0],`(_.${variable.split('.')[0]} || ${variable.split('.')[0]})`);\r\n        }\r\n    }\r\n    // for(var $ of $$){\r\n    //     if((typeof window[($.split('.')[0] || $)] === 'undefined')){\r\n    //         console.log($$)\r\n    //     }\r\n    // }\r\n    return exp;\r\n}\r\n\r\nexport const parseReactive = (parts, ctx = {}) => {\r\n    return parts.map(e => {\r\n        let exp = \"\";\r\n        if(e.startsWith('{') && e.endsWith('}')){\r\n            exp = e.slice(1,e.length-1).trim();\r\n        }else{\r\n            return `\"${e}\"`;\r\n        }\r\n        return `__.s(${parseExpression(exp,ctx)})`;\r\n    }).join(\",\");\r\n}\r\n\r\nexport const parseOptions = ($node, ctx = {}) => {\r\n    var attrs = [];\r\n    if($node.attributes.length > 0){\r\n        for(var {name,value} of $node.attributes){\r\n            if(name.includes(':'))\r\n                attrs.push(`'${name.slice(1)}': ${parseExpression(value,ctx)}`);\r\n            else\r\n                attrs.push(`'${name}': '${value}'`);\r\n        }\r\n    }\r\n    return `{ attrs: {${attrs.join(',')}}}`;\r\n}\r\n\r\n\r\nexport const parseDOM = ($html, ctx = {}) => {\r\n    try{\r\n        const data = new DOMParser().parseFromString($html,'text/html').body;\r\n        return data;\r\n    }catch(e){\r\n        throw new Error(\"Parsing DOM error!\");\r\n    }\r\n}"],"names":["parse","$target","d","ctx","vnode","$childNode","childNodes","nodeType","Node","TEXT_NODE","hasAttribute","push","parseFromElement","join","h","$node","tagName","parseOptions","parseDirective","$statement","getAttribute","removeAttribute","includes","parseExpression","trim","l","r","split","$elseNode","nextElementSibling","setAttribute","parseText","textContent","$text","text","replaceAll","parts","t","p","c","length","pop","parseReactive","filter","e","exp","$$","matchAll","$","variable","pos","index","window","substring","replace","map","startsWith","endsWith","slice","attrs","attributes","name","value","parseDOM","$html","DOMParser","parseFromString","body","Error"],"mappings":"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"}